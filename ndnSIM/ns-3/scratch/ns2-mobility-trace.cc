/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2007 INRIA
 *               2009,2010 Contributors
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Martín Giachino <martin.giachino@gmail.com>
 *
 *
 * This example demonstrates the use of Ns2MobilityHelper class to work with mobility.
 *
 * Detailed example description.
 *
 *  - intended usage: this should be used in order to load ns2 movement trace files into ns3.
 *  - behavior:
 *      - Ns2MobilityHelper object is created, associated to the specified trace file. 
 *      - A log file is created, using the log file name argument.
 *      - A node container is created with the number of nodes specified in the command line.  For the default ns-2 trace, specify the value 2 for this argument.
 *      - the program calls the Install() method of Ns2MobilityHelper to set mobility to nodes. At this moment, the file is read line by line, and the movement is scheduled in the simulator.
 *      - A callback is configured, so each time a node changes its course a log message is printed.
 *  - expected output: example prints out messages generated by each read line from the ns2 movement trace file.
 *                     For each line, it shows if the line is correct, or of it has errors and in this case it will
 *                     be ignored.
 *
 * Usage of ns2-mobility-trace:
 *
 *  ./waf --run "ns2-mobility-trace \
 *        --traceFile=src/mobility/examples/default.ns_movements
 *        --nodeNum=2  --duration=100.0 --logFile=ns2-mobility-trace.log"
 *
 *  NOTE: ns2-traces-file could be an absolute or relative path. You could use the file default.ns_movements
 *        included in the same directory as the example file.
 *  NOTE 2: Number of nodes present in the trace file must match with the command line argument.
 *          Note that you must know it before to be able to load it.
 *  NOTE 3: Duration must be a positive number and should match the trace file. Note that you must know it before to be able to load it.
 */


#include <iostream>
#include <fstream>
#include <sstream>

#include "ns3/core-module.h"
#include "ns3/mobility-module.h"
#include "ns3/ns2-mobility-helper.h"
#include "ns3/wifi-module.h"

#include "ns3/applications-module.h"
#include "ns3/internet-module.h"

#include "ns3/ndnSIM-module.h"
namespace ns3{

// Prints actual position and velocity when a course change event occurs发生航向改变事件时打印实际位置和速度
static void
CourseChange (std::ostream *os, std::string foo, Ptr<const MobilityModel> mobility)
{
  Vector pos = mobility->GetPosition (); // Get position
  Vector vel = mobility->GetVelocity (); // Get velocity

  // Prints position and velocities
  *os << Simulator::Now () << " POS: x=" << pos.x << ", y=" << pos.y
      << ", z=" << pos.z << "; VEL:" << vel.x << ", y=" << vel.y
      << ", z=" << vel.z << std::endl;
}

// Example to use ns2 traces file in ns3在ns3中使用ns2跟踪文件的示例
int main (int argc, char *argv[])
{
  std::string traceFile;//traceFile是仿真拓扑文件xxx.tcl
  std::string logFile;

  int    nodeNum;
  double duration;

  // Enable logging from the ns2 helper日志信息
  //LogComponentEnable ("Ns2MobilityHelper",LOG_LEVEL_DEBUG);

  //设置节点间链接和通道的默认参数
  // disable fragmentation for frames below 2200 bytes
  Config::SetDefault ("ns3::WifiRemoteStationManager::FragmentationThreshold", StringValue ("2200"));
  // turn off RTS/CTS for frames below 2200 bytes
  Config::SetDefault ("ns3::WifiRemoteStationManager::RtsCtsThreshold", StringValue ("2200"));
  // Fix non-unicast data rate to be the same as that of unicast
  Config::SetDefault ("ns3::WifiRemoteStationManager::NonUnicastMode",
                      StringValue ("DsssRate1Mbps"));


  // Parse command line attribute
  CommandLine cmd;
  cmd.AddValue ("traceFile", "Ns2 movement trace file", traceFile);
  cmd.AddValue ("nodeNum", "Number of nodes", nodeNum);
  cmd.AddValue ("duration", "Duration of Simulation", duration);
  cmd.AddValue ("logFile", "Log file", logFile);
  cmd.Parse (argc,argv);

  // Check command line arguments//出错处理
  if (traceFile.empty () || nodeNum <= 0 || duration <= 0 || logFile.empty ())
    {
      std::cout << "Usage of " << argv[0] << " :\n\n"
      "./waf --run \"ns2-mobility-trace"
      " --traceFile=src/mobility/examples/default.ns_movements"
      " --nodeNum=2 --duration=100.0 --logFile=ns2-mob.log\" \n\n"
      "NOTE: ns2-traces-file could be an absolute or relative path. You could use the file default.ns_movements\n"
      "      included in the same directory of this example file.\n\n"
      "NOTE 2: Number of nodes present in the trace file must match with the command line argument and must\n"
      "        be a positive number. Note that you must know it before to be able to load it.\n\n"
      "NOTE 3: Duration must be a positive number. Note that you must know it before to be able to load it.\n\n";

      return 0;
    }


  //设置wifi标准和速率
  WifiHelper wifi;
  // wifi.SetRemoteStationManager ("ns3::AarfWifiManager");
  wifi.SetStandard(WIFI_PHY_STANDARD_80211a);
  wifi.SetRemoteStationManager("ns3::ConstantRateWifiManager", "DataMode",
                               StringValue("OfdmRate24Mbps"));

  //设置信道
  YansWifiChannelHelper wifiChannel; // = YansWifiChannelHelper::Default ();
  wifiChannel.SetPropagationDelay("ns3::ConstantSpeedPropagationDelayModel");
  wifiChannel.AddPropagationLoss("ns3::ThreeLogDistancePropagationLossModel");
  wifiChannel.AddPropagationLoss("ns3::NakagamiPropagationLossModel");

  YansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default ();
  wifiPhy.SetChannel(wifiChannel.Create());
  wifiPhy.Set("TxPowerStart", DoubleValue(5));
  wifiPhy.Set("TxPowerEnd", DoubleValue(5));

// Add a mac and disable rate control
  WifiMacHelper wifiMac= NqosWifiMacHelper::Default();
  // Set it to adhoc mode
  wifiMac.SetType ("ns3::AdhocWifiMac");

// Create Ns2MobilityHelper with the specified trace log file as parameter
    //创建Ns2MobilityHelper的对象ns2
  Ns2MobilityHelper ns2 = Ns2MobilityHelper (traceFile);

  // open log file for output
  std::ofstream os;
  os.open (logFile.c_str ());

  // Create all nodes.
  NodeContainer c;
  c.Create (nodeNum);
  

  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c);

  //在读取跟踪文件的同时配置每个节点的移动
  ns2.Install (); // configure movements for each node, while reading trace file


  // Configure callback for logging
  //配置日志记录的回调
  Config::Connect ("/NodeList/*/$ns3::MobilityModel/CourseChange",
                   MakeBoundCallback (&CourseChange, &os));


  ndn::StackHelper ndnHelper;
  ndnHelper.SetDefaultRoutes(true);//此处使用默认创建方式
  ndnHelper.Install(c);

  //Ipv4AddressHelper ipAddrs;
  //ipAddrs.SetBase ("192.168.0.0", "255.255.255.0");
  //Ipv4InterfaceContainer i = ipAddrs.Assign (devices);

  // Set BestRoute strategy
  ndn::StrategyChoiceHelper::Install(c, "/", "/localhost/nfd/strategy/bayes");
  // Installing global routing interface on all nodes
  ndn::GlobalRoutingHelper ndnGlobalRoutingHelper;
  ndnGlobalRoutingHelper.InstallAll();


  // 4. Set up applications
  //NS_LOG_INFO("Installing Applications");

  // Consumer
  ndn::AppHelper consumerHelper("ns3::ndn::ConsumerCbr");   //使用consumercbr类
  // Consumer will request /prefix/0, /prefix/1, ...
  consumerHelper.SetPrefix("/prefix");        //选择策略
  consumerHelper.SetAttribute("Frequency", StringValue("10")); // 每秒10个请求
  //consumerHelper.Install(nodes.Get(0));    // 选择节点
  consumerHelper.Install(c.Get(0));
  consumerHelper.Install(c.Get(2));
  consumerHelper.Install(c.Get(4));
  consumerHelper.Install(c.Get(6));
  consumerHelper.Install(c.Get(8));
  consumerHelper.Install(c.Get(10));

 
 
  // Producer
  ndn::AppHelper producerHelper("ns3::ndn::Producer");
  // Producer will reply to all requests starting with /prefix
  producerHelper.SetPrefix("/prefix");
  producerHelper.SetAttribute("PayloadSize", StringValue("1200"));
  producerHelper.Install(c.Get(1));
  producerHelper.Install(c.Get(3));
  producerHelper.Install(c.Get(5));
  producerHelper.Install(c.Get(7));
  producerHelper.Install(c.Get(9));
  producerHelper.Install(c.Get(11));



  AsciiTraceHelper ascii;
  wifiPhy.EnableAsciiAll(ascii.CreateFileStream("bayes.tr"));

  ndn::L3RateTracer::InstallAll("rate-trace.txt",Seconds(0.5));

  L2RateTracer::InstallAll("drop-trace.txt", Seconds(0.5));

  ndn::AppDelayTracer::InstallAll("app-delays-trace.txt");

  //ndn::CsTracer::InstallAll("cs-trace.txt", Seconds(1));

  Simulator::Stop (Seconds (duration));//设置时间停止时间
  Simulator::Run ();
  Simulator::Destroy ();

  os.close (); // close log file
  return 0;
}
}//namespace

int
main(int argc, char* argv[])
{
  return ns3::main(argc, argv);
}
